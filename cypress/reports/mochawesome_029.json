{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 1,
    "pending": 0,
    "failures": 3,
    "start": "2022-08-12T01:45:59.469Z",
    "end": "2022-08-12T01:46:44.258Z",
    "duration": 44789,
    "testsRegistered": 4,
    "passPercent": 25,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d22c0716-8b0d-4a5d-b490-a53a72083237",
      "title": "",
      "fullFile": "cypress/integration/04.SaveExpensesForm_spec.js",
      "file": "cypress/integration/04.SaveExpensesForm_spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2b6524e5-e637-4b45-bbff-a35cee175eae",
          "title": "4 - Salve todas as informações do formulário no estado global",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adiciona uma despesa e verifica se a soma de despesas do header foi atualizada e os inputs voltaram ao valor inicial",
              "fullTitle": "4 - Salve todas as informações do formulário no estado global Adiciona uma despesa e verifica se a soma de despesas do header foi atualizada e os inputs voltaram ao valor inicial",
              "timedOut": null,
              "duration": 15847,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const expense = {\n  value: '11',\n  currency: 'USD',\n  method: 'Cartão de crédito',\n  tag: 'Lazer',\n  description: 'Onze dólares'\n};\n(0, _helperFunctions.addExpense)(expense);\ncy.getByTestId(_constants.TOTAL_FIELD_TEST_ID).should('have.text', '52.28');\ncy.getByTestId(_constants.VALUE_INPUT_TEST_ID).should('have.value', '');\ncy.getByTestId(_constants.DESCRIPTION_INPUT_TEST_ID).should('have.value', '');",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: expected '<p>' to have text '52.28', but the text was 'Despesas Total: 2.3142791020597087'",
                "estack": "AssertionError: Timed out retrying after 10000ms: expected '<p>' to have text '52.28', but the text was 'Despesas Total: 2.3142791020597087'\n    at Context.eval (http://localhost:3000/__cypress/tests?p=cypress/integration/04.SaveExpensesForm_spec.js:179:52)",
                "diff": "- 'Despesas Total: 2.3142791020597087'\n+ '52.28'\n"
              },
              "uuid": "e29405b1-9b27-42ff-9e67-ced3e6acc239",
              "parentUUID": "2b6524e5-e637-4b45-bbff-a35cee175eae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adiciona uma despesa e verifica se a despesa foi salva no estado global",
              "fullTitle": "4 - Salve todas as informações do formulário no estado global Adiciona uma despesa e verifica se a despesa foi salva no estado global",
              "timedOut": null,
              "duration": 12432,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const expense = {\n  value: '11',\n  currency: 'USD',\n  method: 'Cartão de crédito',\n  tag: 'Lazer',\n  description: 'Onze dólares'\n};\n(0, _helperFunctions.addExpense)(expense);\ncy.window().its('store').invoke('getState').its('wallet.expenses').should('deep.equal', [_objectSpread(_objectSpread({}, expense), {}, {\n  id: 0,\n  exchangeRates: _data.mockData\n})]);",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: expected [ Array(1) ] to deeply equal [ Array(1) ]",
                "estack": "AssertionError: Timed out retrying after 10000ms: expected [ Array(1) ] to deeply equal [ Array(1) ]\n    at Context.eval (http://localhost:3000/__cypress/tests?p=cypress/integration/04.SaveExpensesForm_spec.js:192:72)",
                "diff": "- [ { id: 0,\n-     value: '11',\n-     valueBRL: '',\n+ [ { value: '11',\n     currency: 'USD',\n     method: 'Cartão de crédito',\n     tag: 'Lazer',\n     description: 'Onze dólares',\n+     id: 0,\n     exchangeRates: \n      { USD: [Object],\n        USDT: [Object],\n        CAD: [Object],\n"
              },
              "uuid": "470585f0-0e70-41a0-a7d9-5afbd3422a6a",
              "parentUUID": "2b6524e5-e637-4b45-bbff-a35cee175eae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verifica se a API é chamada a cada vez que o botão 'Adicionar despesa' é clicado",
              "fullTitle": "4 - Salve todas as informações do formulário no estado global Verifica se a API é chamada a cada vez que o botão 'Adicionar despesa' é clicado",
              "timedOut": null,
              "duration": 2905,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const expense = {\n  value: '11',\n  currency: 'USD',\n  method: 'Cartão de crédito',\n  tag: 'Lazer',\n  description: 'Onze dólares'\n};\ncy.get('@mockFetch').should('be.calledOnce');\n(0, _helperFunctions.addExpense)(expense);\ncy.get('@mockFetch').should('be.calledTwice');\n(0, _helperFunctions.addExpense)(expense);\ncy.get('@mockFetch').should('be.calledThrice');",
              "err": {},
              "uuid": "66d5df8e-de99-4cd6-9a3e-f5382bf9cfa5",
              "parentUUID": "2b6524e5-e637-4b45-bbff-a35cee175eae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adiciona duas despesas e verifica se o estado global e header foram atualizados",
              "fullTitle": "4 - Salve todas as informações do formulário no estado global Adiciona duas despesas e verifica se o estado global e header foram atualizados",
              "timedOut": null,
              "duration": 11887,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const firstExpense = {\n  id: 0,\n  value: '11',\n  currency: 'USD',\n  method: 'Cartão de crédito',\n  tag: 'Lazer',\n  description: 'Onze dólares',\n  exchangeRates: _data.mockData\n};\n(0, _helperFunctions.addExpense)(firstExpense);\ncy.window().its('store').invoke('getState').its('wallet.expenses').should('deep.equal', [firstExpense]);\nconst secondExpense = {\n  id: 1,\n  value: '20',\n  currency: 'EUR',\n  method: 'Cartão de débito',\n  tag: 'Trabalho',\n  description: 'Vinte euros',\n  exchangeRates: _data.mockData\n};\n(0, _helperFunctions.addExpense)(secondExpense);\ncy.window().its('store').invoke('getState').its('wallet.expenses').should('deep.equal', [firstExpense, secondExpense]);\ncy.getByTestId(_constants.TOTAL_FIELD_TEST_ID).should('have.text', '154.82');",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: expected [ Array(1) ] to deeply equal [ Array(1) ]",
                "estack": "AssertionError: Timed out retrying after 10000ms: expected [ Array(1) ] to deeply equal [ Array(1) ]\n    at Context.eval (http://localhost:3000/__cypress/tests?p=cypress/integration/04.SaveExpensesForm_spec.js:222:72)",
                "diff": " [ { id: 0,\n     value: '11',\n-     valueBRL: '',\n     currency: 'USD',\n     method: 'Cartão de crédito',\n     tag: 'Lazer',\n     description: 'Onze dólares',\n"
              },
              "uuid": "f66ca883-0780-4df0-8abb-7332b956d2c7",
              "parentUUID": "2b6524e5-e637-4b45-bbff-a35cee175eae",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "66d5df8e-de99-4cd6-9a3e-f5382bf9cfa5"
          ],
          "failures": [
            "e29405b1-9b27-42ff-9e67-ced3e6acc239",
            "470585f0-0e70-41a0-a7d9-5afbd3422a6a",
            "f66ca883-0780-4df0-8abb-7332b956d2c7"
          ],
          "pending": [],
          "skipped": [],
          "duration": 43071,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}